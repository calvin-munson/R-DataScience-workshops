## To set up, let's load our packages like we did last time
library(dplyr)
library(ggplot2)
data("iris")
force(iris)
View(iris)
?iris
data("iris")
iris
?iris
colnames(iris)
head(iris)
# What species do we have?
iris$Species %>% unique()
## Let's give the ggplot function some data
ggplot(data = iris)
head(iris)
## What happens when we color the points by species?
iris %>%
ggplot(aes(Petal.Length, Petal.Width, color = Species)) +
geom_point()
ggplot(data = mtcars, aes(x = Petal.Length, y = Petal.Width))
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width))
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point()
## What happens when we color the points by species?
iris %>%
ggplot(aes(Petal.Length, Petal.Width, color = Species)) +
geom_point()
# geom_point used color = ____ in order to color the points. However with box plots and bar charts, color adds color to the outline. We can use that, or we can use fill = ____ to fill in the boxplots with a certain color. This is a good way to show differences between categorical variables and continuous variables
iris %>%
ggplot(aes(Species, Petal.Length, fill = Species)) +
geom_boxplot()
## So now a challenge for you: What is the relationship between sepal length and sepal width?
# Doesn't look like there's much of a relationship.......or is there?
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width)) +
geom_point()
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point()
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
facet_wrap(Species ~ .)
p.1 <- iris %>%
ggplot(aes(Petal.Length, Petal.Width, shape = Species, fill = Species)) +
geom_point(size = 2.5, alpha = .8, position = "jitter") +
theme_classic() +
scale_shape_manual(values = c(21, 22, 23)) +
scale_fill_brewer(palette = "Set2")
p.2 <- iris %>%
ggplot(aes(Species, Petal.Width, shape = Species, fill = Species)) +
geom_boxplot() +
theme_classic() +
scale_shape_manual(values = c(21, 22, 23)) +
scale_fill_brewer(palette = "Set2")
p.1 + theme_minimal() +
p.2 + theme_minimal()
iris %>% ggpairs()
library(patchwork)
p.1 + theme_minimal() +
p.2 + theme_minimal()
daily.sums %>%
ggplot(aes(date, daily_cases)) +
geom_point(size = 2) +
geom_line(size = .75) +
# Add updated date
geom_text(aes(label = if_else(date == min(date),
paste("Last updated: ", date.updated, sep = ""),
""
),
x = min(date) + length(date)*.05,
y = max(daily_cases) - .45*max(daily_cases)),
hjust = 0) +
# Add total cases
geom_text(aes(label = if_else(date == min(date),
paste("Total reported cases: ", total.byType$total, sep = ""),
""
),
x = min(date) + length(date)*.05,
y = max(daily_cases) - .1*max(daily_cases)),
hjust = 0) +
# Add confirmed cases
geom_text(aes(label = if_else(date == min(date),
paste("Currently confirmed cases: ", total.byType$confirmed, sep = ""),
""
),
x = min(date) + length(date)*.05,
y = max(daily_cases) - .17*max(daily_cases)),
hjust = 0) +
# Add recovered cases
geom_text(aes(label = if_else(date == min(date),
paste("Recovered cases: ", total.byType$recovered, sep = ""),
""
),
x = min(date) + length(date)*.05,
y = max(daily_cases) - .24*max(daily_cases)),
hjust = 0) +
# Add deaths
geom_text(aes(label = if_else(date == min(date),
paste("Total deaths: ", total.byType$death, sep = ""),
""
),
x = min(date) + length(date)*.05,
y = max(daily_cases) - .31*max(daily_cases)),
hjust = 0) +
labs(x = "Date",
y = "Cases per day") +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d, %Y") +
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "plain", hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x=element_text(size=12, angle = 315, hjust = 0),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=13, margin=margin(t=15, unit="pt")),
axis.title.y=element_text(size=13, margin=margin(r=15, unit="pt")),
strip.text=element_text(size=12, face = "bold"),
panel.grid.minor.x = element_blank(),
plot.margin=unit(c(.7,1.5,.7,.7), "cm"),
legend.title = element_text(size = 13),
legend.text = element_text(size = 13)
)
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(shape = 17, color = "blue", size = 2.5)
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
facet_wrap(Species ~ .)
library(tidyverse)
library(lubridate)
library(patchwork)
#devtools::install_github("RamiKrispin/coronavirus")
library(coronavirus)
#Store aesthetics. Thes
library(tidyverse)
library(lubridate)
library(patchwork)
#devtools::install_github("RamiKrispin/coronavirus")
library(coronavirus)
#Store aesthetics. These themes can be used throughout the other scripts
theme_casual <- theme_bw() +
theme(
plot.title = element_text(size = 15, face = "plain", hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=13, margin=margin(t=15, unit="pt")),
axis.title.y=element_text(size=13, margin=margin(r=15, unit="pt")),
strip.text=element_text(size=12, face = "bold"),
plot.margin=unit(c(.4,.4,.4,.4), "cm"),
legend.title = element_text(size = 13),
legend.text = element_text(size = 13)
)
theme_set(theme_casual)
# 2. Clean the data -----------------------------------------------------
coronavirus %>% head()
# Unique countries
coronavirus$Country.Region %>% unique()
# When was this last updated?
date.updated <- coronavirus$date %>%
max() %>%
format.Date("%B %d, %Y")
# * 2.1 Filter for just US ------------------------------------------------
## filter for just US cases, and add a "State component
US.cases <- coronavirus %>%
filter(Country.Region == "US") %>%
mutate(State = Province.State) %>%
separate(State, into = c("other", "State"), sep = -2) %>%
select(-other) %>%
# Filter out the cruise people
filter(State != "s)")
US.cases$State %>% unique()
# * 2.2 Calculate summary -------------------------------------------------
state.type.counts <- US.cases %>%
group_by(State, type) %>%
summarise(cases.type = sum(cases, na.rm = TRUE)) %>%
ungroup()
state.total.counts <- US.cases %>%
group_by(State) %>%
summarise(total_cases = sum(cases, na.rm = TRUE)) %>%
ungroup() %>%
mutate(State = fct_reorder(State, total_cases))
# 3. Visualizations -------------------------------------------------------
## Plot by state
p.state.counts <- state.total.counts %>%
ggplot(aes(x = State, y = total_cases)) +
geom_col() +
geom_text(aes(label = total_cases),
nudge_y = 5) +
theme_minimal() +
coord_flip() +
theme(panel.grid.minor.x = element_blank())
p.state.counts
# * 3.3. Cases per type by day --------------------------------------------
daily.cases.byType <- US.cases %>%
group_by(date, type) %>%
summarise(type_cases = sum(cases, na.rm = TRUE))
total.byType <- daily.cases.byType %>%
group_by(type) %>%
summarise(total.type = sum(type_cases, na.rm = TRUE)) %>%
pivot_wider(names_from = type, values_from = total.type) %>%
mutate(total = confirmed + death + recovered)
daily.cases.byType %>%
ggplot(aes(date, type_cases, color = type)) +
geom_point() +
geom_line() +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d, %Y") +
theme_classic() +
theme(axis.text.x = element_text(angle = 315, hjust = 0),
panel.grid.minor.x = element_blank())
# * 3.2 Cases per day ---------------------------------------------------
daily.sums <- US.cases %>%
group_by(date) %>%
summarise(daily_cases = sum(cases, na.rm = TRUE))
daily.sums %>%
ggplot(aes(date, daily_cases)) +
geom_point(size = 2) +
geom_line(size = .75) +
# Add updated date
geom_text(aes(label = if_else(date == min(date),
paste("Last updated: ", date.updated, sep = ""),
""
),
x = min(date) + length(date)*.05,
y = max(daily_cases) - .45*max(daily_cases)),
hjust = 0) +
# Add total cases
geom_text(aes(label = if_else(date == min(date),
paste("Total reported cases: ", total.byType$total, sep = ""),
""
),
x = min(date) + length(date)*.05,
y = max(daily_cases) - .1*max(daily_cases)),
hjust = 0) +
# Add confirmed cases
geom_text(aes(label = if_else(date == min(date),
paste("Currently confirmed cases: ", total.byType$confirmed, sep = ""),
""
),
x = min(date) + length(date)*.05,
y = max(daily_cases) - .17*max(daily_cases)),
hjust = 0) +
# Add recovered cases
geom_text(aes(label = if_else(date == min(date),
paste("Recovered cases: ", total.byType$recovered, sep = ""),
""
),
x = min(date) + length(date)*.05,
y = max(daily_cases) - .24*max(daily_cases)),
hjust = 0) +
# Add deaths
geom_text(aes(label = if_else(date == min(date),
paste("Total deaths: ", total.byType$death, sep = ""),
""
),
x = min(date) + length(date)*.05,
y = max(daily_cases) - .31*max(daily_cases)),
hjust = 0) +
labs(x = "Date",
y = "Cases per day") +
scale_x_date(date_breaks = "4 days", date_labels = "%b %d, %Y") +
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "plain", hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x=element_text(size=12, angle = 315, hjust = 0),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=13, margin=margin(t=15, unit="pt")),
axis.title.y=element_text(size=13, margin=margin(r=15, unit="pt")),
strip.text=element_text(size=12, face = "bold"),
panel.grid.minor.x = element_blank(),
plot.margin=unit(c(.7,1.5,.7,.7), "cm"),
legend.title = element_text(size = 13),
legend.text = element_text(size = 13)
)
p.state.counts
US.cases$State %>% unique()
US.cases
US.cases %>%
filter(State == "ip")
US.cases <- coronavirus %>%
filter(Country.Region == "US") %>%
mutate(State = Province.State) %>%
separate(State, into = c("other", "State"), sep = -2) %>%
select(-other)
US.cases$State %>% unique()
## filter for just US cases, and add a "State component
US.cases <- coronavirus %>%
filter(Country.Region == "US") %>%
mutate(State = Province.State) %>%
separate(State, into = c("other", "State"), sep = -2) %>%
select(-other) %>%
# Filter out the cruise people
filter(State != "s)")
US.cases$State %>% unique()
US.cases %>%
filter(State == "ip")
q()
